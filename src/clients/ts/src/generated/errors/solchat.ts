/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** UsernameTooLong: Username too long */
export class UsernameTooLongError extends ProgramError {
  override readonly name: string = 'UsernameTooLong';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Username too long', program, cause);
  }
}
codeToErrorMap.set(0x1770, UsernameTooLongError);
nameToErrorMap.set('UsernameTooLong', UsernameTooLongError);

/** UsernameTooShort: Username too short */
export class UsernameTooShortError extends ProgramError {
  override readonly name: string = 'UsernameTooShort';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Username too short', program, cause);
  }
}
codeToErrorMap.set(0x1771, UsernameTooShortError);
nameToErrorMap.set('UsernameTooShort', UsernameTooShortError);

/** GroupNameTooLong: Group name too long */
export class GroupNameTooLongError extends ProgramError {
  override readonly name: string = 'GroupNameTooLong';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Group name too long', program, cause);
  }
}
codeToErrorMap.set(0x1772, GroupNameTooLongError);
nameToErrorMap.set('GroupNameTooLong', GroupNameTooLongError);

/** GroupNameTooShort: Group name too short */
export class GroupNameTooShortError extends ProgramError {
  override readonly name: string = 'GroupNameTooShort';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Group name too short', program, cause);
  }
}
codeToErrorMap.set(0x1773, GroupNameTooShortError);
nameToErrorMap.set('GroupNameTooShort', GroupNameTooShortError);

/** TooManyMembersInit: Can't initialize group with more than 2 members */
export class TooManyMembersInitError extends ProgramError {
  override readonly name: string = 'TooManyMembersInit';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super("Can't initialize group with more than 2 members", program, cause);
  }
}
codeToErrorMap.set(0x1774, TooManyMembersInitError);
nameToErrorMap.set('TooManyMembersInit', TooManyMembersInitError);

/** TooFewMembersInit: Can't initialize group with less than 2 members */
export class TooFewMembersInitError extends ProgramError {
  override readonly name: string = 'TooFewMembersInit';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super("Can't initialize group with less than 2 members", program, cause);
  }
}
codeToErrorMap.set(0x1775, TooFewMembersInitError);
nameToErrorMap.set('TooFewMembersInit', TooFewMembersInitError);

/** TooFewEncryptedKeys: Didn't provide encrypted keys for all members */
export class TooFewEncryptedKeysError extends ProgramError {
  override readonly name: string = 'TooFewEncryptedKeys';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super("Didn't provide encrypted keys for all members", program, cause);
  }
}
codeToErrorMap.set(0x1776, TooFewEncryptedKeysError);
nameToErrorMap.set('TooFewEncryptedKeys', TooFewEncryptedKeysError);

/** NotGroupOwner: Not group owner */
export class NotGroupOwnerError extends ProgramError {
  override readonly name: string = 'NotGroupOwner';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Not group owner', program, cause);
  }
}
codeToErrorMap.set(0x1777, NotGroupOwnerError);
nameToErrorMap.set('NotGroupOwner', NotGroupOwnerError);

/** NotInGroup: Not in group */
export class NotInGroupError extends ProgramError {
  override readonly name: string = 'NotInGroup';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Not in group', program, cause);
  }
}
codeToErrorMap.set(0x1778, NotInGroupError);
nameToErrorMap.set('NotInGroup', NotInGroupError);

/** MessageTooShort: Message too short */
export class MessageTooShortError extends ProgramError {
  override readonly name: string = 'MessageTooShort';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Message too short', program, cause);
  }
}
codeToErrorMap.set(0x1779, MessageTooShortError);
nameToErrorMap.set('MessageTooShort', MessageTooShortError);

/** InvalidUserKeysLenght: Invalid user keys length */
export class InvalidUserKeysLenghtError extends ProgramError {
  override readonly name: string = 'InvalidUserKeysLenght';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Invalid user keys length', program, cause);
  }
}
codeToErrorMap.set(0x177a, InvalidUserKeysLenghtError);
nameToErrorMap.set('InvalidUserKeysLenght', InvalidUserKeysLenghtError);

/** CannotRemoveOwner: Cannot remove owner */
export class CannotRemoveOwnerError extends ProgramError {
  override readonly name: string = 'CannotRemoveOwner';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Cannot remove owner', program, cause);
  }
}
codeToErrorMap.set(0x177b, CannotRemoveOwnerError);
nameToErrorMap.set('CannotRemoveOwner', CannotRemoveOwnerError);

/** CannotChangeMemberDM: Cannot change member in DM */
export class CannotChangeMemberDMError extends ProgramError {
  override readonly name: string = 'CannotChangeMemberDM';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('Cannot change member in DM', program, cause);
  }
}
codeToErrorMap.set(0x177c, CannotChangeMemberDMError);
nameToErrorMap.set('CannotChangeMemberDM', CannotChangeMemberDMError);

/** UserNotInGroup: User not in group */
export class UserNotInGroupError extends ProgramError {
  override readonly name: string = 'UserNotInGroup';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('User not in group', program, cause);
  }
}
codeToErrorMap.set(0x177d, UserNotInGroupError);
nameToErrorMap.set('UserNotInGroup', UserNotInGroupError);

/** InsufficientPermissions: Insufficient permissions */
export class InsufficientPermissionsError extends ProgramError {
  override readonly name: string = 'InsufficientPermissions';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('Insufficient permissions', program, cause);
  }
}
codeToErrorMap.set(0x177e, InsufficientPermissionsError);
nameToErrorMap.set('InsufficientPermissions', InsufficientPermissionsError);

/** MessageNotFound: Message not found */
export class MessageNotFoundError extends ProgramError {
  override readonly name: string = 'MessageNotFound';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('Message not found', program, cause);
  }
}
codeToErrorMap.set(0x177f, MessageNotFoundError);
nameToErrorMap.set('MessageNotFound', MessageNotFoundError);

/** AlreadyInChat: Already In Chat */
export class AlreadyInChatError extends ProgramError {
  override readonly name: string = 'AlreadyInChat';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('Already In Chat', program, cause);
  }
}
codeToErrorMap.set(0x1780, AlreadyInChatError);
nameToErrorMap.set('AlreadyInChat', AlreadyInChatError);

/** IncorrectUser: Incorrect User */
export class IncorrectUserError extends ProgramError {
  override readonly name: string = 'IncorrectUser';

  readonly code: number = 0x1781; // 6017

  constructor(program: Program, cause?: Error) {
    super('Incorrect User', program, cause);
  }
}
codeToErrorMap.set(0x1781, IncorrectUserError);
nameToErrorMap.set('IncorrectUser', IncorrectUserError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getSolchatErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getSolchatErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
