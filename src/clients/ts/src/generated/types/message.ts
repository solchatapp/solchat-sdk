/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  i64,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Message = {
  sender: PublicKey;
  encryptedMessage: Uint8Array;
  iv: Array<number>;
  timestamp: bigint;
  version: bigint;
  messageId: bigint;
};

export type MessageArgs = {
  sender: PublicKey;
  encryptedMessage: Uint8Array;
  iv: Array<number>;
  timestamp: number | bigint;
  version: number | bigint;
  messageId: number | bigint;
};

export function getMessageSerializer(): Serializer<MessageArgs, Message> {
  return struct<Message>(
    [
      ['sender', publicKeySerializer()],
      ['encryptedMessage', bytes({ size: u32() })],
      ['iv', array(u8(), { size: 16 })],
      ['timestamp', i64()],
      ['version', u64()],
      ['messageId', u64()],
    ],
    { description: 'Message' }
  ) as Serializer<MessageArgs, Message>;
}
